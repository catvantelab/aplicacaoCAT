mirtCAT::generate.mirt_object(
as.data.frame(df_mirt_model),
'graded'
)
type((df_mirt_model)
type(df_mirt_model)
type(df_mirt_model)
class(df_mirt_model)
data.frame(df_mirt_model)
mirtCAT::generate.mirt_object(
data.frame(df_mirt_model),
'graded'
)
names(df_mirt_model) <- c(
'a1',
paste0('d', colunas_b_num),
'c'
)
df_mirt_model
mirt_model <- mirtCAT::generate.mirt_object(
data.frame(df_mirt_model),
'graded'
)
mirt_model <- mirtCAT::generate.mirt_object(
df_mirt_model,
'graded'
)
mirtCAT::generate.mirt_object(
df_mirt_model,
'graded'
)
mirtCAT::generate.mirt_object(
df_mirt_model,
'graded'
)
# cria objeto Mirt
df_mirt_model <- df_instrumento[,c("a", colunas_b)]
for(i in colunas_b){
df_mirt_model[[i]] <- -df_mirt_model$a * df_mirt_model[[i]]
}
names(df_mirt_model) <- c(
'a1',
paste0('d', colunas_b_num)
)
mirt_model <- mirtCAT::generate.mirt_object(
df_mirt_model,
'graded'
)
#' verifica_requisitos_df_instrumento
#'
#' @description A fct function
#'
#' @return The return value, if any, from executing the function.
#'
#' @noRd
verifica_requisitos_df_instrumento <- function(df_instrumento){
require(crayon)
require(mirt)
# Verifica se a coluna 'item' está correta
if ("item" %in% colnames(df_instrumento)) {
if (is.numeric(df_instrumento$item) && length(unique(df_instrumento$item)) == nrow(df_instrumento)) {
cat(crayon::green("✔"), "A coluna 'item' atende aos requisitos\n")
} else {
stop("A coluna 'item' não atende aos requisitos. Verifique se a coluna 'item' possui valores numéricos e não repetidos\n")
}
} else {
stop("A coluna 'item' não está presente na base de dados. Ela deve conter valores únicos e numéricos\n")
}
# Verifica se a coluna 'enunciado' está correta
if ("enunciado" %in% colnames(df_instrumento)) {
if (is.character(df_instrumento$enunciado)) {
cat(crayon::green("✔"), "A coluna 'enunciado' atende aos requisitos\n")
} else {
stop("A coluna 'enunciado' não contém valores do tipo string (ou texto)\n")
}
} else {
stop("A coluna 'enunciado' não está presente na base de dados. Ela deve conter somente valores do tipo string (ou texto)\n")
}
colunas_categoria <- grep("^cat\\d+$", colnames(df_instrumento), value = TRUE)
colunas_b <- grep("^b\\d+$", colnames(df_instrumento), value = TRUE)
if (length(colunas_categoria) > 0) {
if (sum(grepl("^cat\\d+$", colunas_categoria)) >= 2) {
if (length(colunas_b) == length(colunas_categoria) - 1) {
if (sum(colnames(df_instrumento) == "a") == 1 && sum(colnames(df_instrumento) == "c") == 1) {
cat(crayon::green("✔"), "As colunas de categorias e parâmetros atendem aos requisitos\n")
} else {
stop("Deve haver exatamente uma coluna 'a' e uma coluna 'c' na base de dados\n")
}
colunas_categoria_num <- as.integer(sub("^cat", "", colunas_categoria))
if (!all(colunas_categoria_num == seq_along(colunas_categoria_num))) {
stop("As colunas de categoria não estão em ordem crescente começando do 1\n")
}
colunas_b_num <- as.integer(sub("^b", "", colunas_b))
if (!all(colunas_b_num == seq_along(colunas_b_num))) {
stop("As colunas 'b' não estão em ordem crescente começando do 1\n")
}
for(i in c("a", colunas_b, "c")){
if(!is.numeric(df_instrumento[[i]])){
stop('A coluna', i, 'não contêm valores numéricos\n')
} else {
cat(crayon::green("✔"), 'A coluna', i, 'atende aos requisitos\n')
}
}
} else {
stop("O número de colunas que começam com 'b' não está correto. É necessário que haja uma coluna para cada mudança de categoria\n")
}
} else {
stop("Não existem pelo menos duas colunas iniciando com 'cat'\n")
}
} else {
stop("As colunas de categoria não estão presentes na base de dados\n")
}
# cria objeto Mirt
df_mirt_model <- df_instrumento[,c("a", colunas_b)]
for(i in colunas_b){
df_mirt_model[[i]] <- -df_mirt_model$a * df_mirt_model[[i]]
}
names(df_mirt_model) <- c(
'a1',
paste0('d', colunas_b_num)
)
mirt_model <- mirtCAT::generate.mirt_object(
df_mirt_model,
'graded'
)
usethis::use_data(
mirt_model,
overwrite = TRUE
)
cat(crayon::green("✔"), "Modelo gerado com sucesso\n")
usethis::use_data(
df_instrumento,
overwrite = TRUE
)
cat(crayon::green("✔"), "Base de dados carregada com sucesso\n")
}
#'    Essa coluna terá o enunciado do item que será apresentado ao sujeito
#'  3. Ao menos duas colunas chamada `cat`, numeradas com as categorias de resposta
#'    Essas são as colunas que irão conter o texto dos itens. Elas precisam estar numeradas
#'    de 1 até o número de categorias. Se são 5 categorias, fica cat1, cat2, cat3, cat4 e cat5
#'  4. Uma coluna com o parâmetro `a`, de mesmo nome
#'  5. Para cada mudança de categoria de resposta, uma coluna chamada `b`.
#'    Este modelo de cat usa o Modelo de Respostas Graduais de Samejima.
#'    Para cada mudança em categoria de resposta, precisa conter uma coluna correspondente.
#'    Se são 5 categorias, são 4 mudanças. É preciso que hajam as colunas b1, b2, b3 e b4
#'  6. Uma coluna com o parâmetro `c`, de mesmo nome.
df_instrumento <- readxl::read_xlsx(
'data-raw/df_instrumento.xlsx'
)
#' Rode a função abaixo para verificar os requisitos citados acima.
#' Se estiver tudo certo, ela mesmo irá salvar a base de dados.
verifica_requisitos_df_instrumento(df_instrumento)
#' verifica_requisitos_df_instrumento
#'
#' @description A fct function
#'
#' @return The return value, if any, from executing the function.
#'
#' @noRd
verifica_requisitos_df_instrumento <- function(df_instrumento){
require(crayon)
require(mirt)
# Verifica se a coluna 'item' está correta
if ("item" %in% colnames(df_instrumento)) {
if (is.numeric(df_instrumento$item) && length(unique(df_instrumento$item)) == nrow(df_instrumento)) {
cat(crayon::green("✔"), "A coluna 'item' atende aos requisitos\n")
} else {
stop("A coluna 'item' não atende aos requisitos. Verifique se a coluna 'item' possui valores numéricos e não repetidos\n")
}
} else {
stop("A coluna 'item' não está presente na base de dados. Ela deve conter valores únicos e numéricos\n")
}
# Verifica se a coluna 'enunciado' está correta
if ("enunciado" %in% colnames(df_instrumento)) {
if (is.character(df_instrumento$enunciado)) {
cat(crayon::green("✔"), "A coluna 'enunciado' atende aos requisitos\n")
} else {
stop("A coluna 'enunciado' não contém valores do tipo string (ou texto)\n")
}
} else {
stop("A coluna 'enunciado' não está presente na base de dados. Ela deve conter somente valores do tipo string (ou texto)\n")
}
colunas_categoria <- grep("^cat\\d+$", colnames(df_instrumento), value = TRUE)
colunas_b <- grep("^b\\d+$", colnames(df_instrumento), value = TRUE)
if (length(colunas_categoria) > 0) {
if (sum(grepl("^cat\\d+$", colunas_categoria)) >= 2) {
if (length(colunas_b) == length(colunas_categoria) - 1) {
if (sum(colnames(df_instrumento) == "a") == 1 && sum(colnames(df_instrumento) == "c") == 1) {
cat(crayon::green("✔"), "As colunas de categorias e parâmetros atendem aos requisitos\n")
} else {
stop("Deve haver exatamente uma coluna 'a' e uma coluna 'c' na base de dados\n")
}
colunas_categoria_num <- as.integer(sub("^cat", "", colunas_categoria))
if (!all(colunas_categoria_num == seq_along(colunas_categoria_num))) {
stop("As colunas de categoria não estão em ordem crescente começando do 1\n")
}
colunas_b_num <- as.integer(sub("^b", "", colunas_b))
if (!all(colunas_b_num == seq_along(colunas_b_num))) {
stop("As colunas 'b' não estão em ordem crescente começando do 1\n")
}
for(i in c("a", colunas_b, "c")){
if(!is.numeric(df_instrumento[[i]])){
stop('A coluna', i, 'não contêm valores numéricos\n')
} else {
cat(crayon::green("✔"), 'A coluna', i, 'atende aos requisitos\n')
}
}
} else {
stop("O número de colunas que começam com 'b' não está correto. É necessário que haja uma coluna para cada mudança de categoria\n")
}
} else {
stop("Não existem pelo menos duas colunas iniciando com 'cat'\n")
}
} else {
stop("As colunas de categoria não estão presentes na base de dados\n")
}
# cria objeto Mirt
df_mirt_model <- df_instrumento[,c("a", colunas_b)]
for(i in colunas_b){
df_mirt_model[[i]] <- -df_mirt_model$a * df_mirt_model[[i]]
}
names(df_mirt_model) <- c(
'a1',
paste0('d', colunas_b_num)
)
mirt_model <- mirtCAT::generate.mirt_object(
df_mirt_model,
'graded'
)
usethis::use_data(
mirt_model,
overwrite = TRUE
)
cat(crayon::green("✔"), "Modelo gerado com sucesso\n")
usethis::use_data(
df_instrumento,
overwrite = TRUE
)
cat(crayon::green("✔"), "Base de dados carregada com sucesso\n")
}
#' ATENÇÃO!!!
#' Rode essa linha antes de começar
source("R/fct_verifica_requisitos_df_instrumento.R", chdir=TRUE)
#' ATENÇÃO!!!
#' Rode essa linha antes de começar
source("R/fct_verifica_requisitos_df_instrumento.R", chdir=TRUE)
#'    Essa coluna terá o enunciado do item que será apresentado ao sujeito
#'  3. Ao menos duas colunas chamada `cat`, numeradas com as categorias de resposta
#'    Essas são as colunas que irão conter o texto dos itens. Elas precisam estar numeradas
#'    de 1 até o número de categorias. Se são 5 categorias, fica cat1, cat2, cat3, cat4 e cat5
#'  4. Uma coluna com o parâmetro `a`, de mesmo nome
#'  5. Para cada mudança de categoria de resposta, uma coluna chamada `b`.
#'    Este modelo de cat usa o Modelo de Respostas Graduais de Samejima.
#'    Para cada mudança em categoria de resposta, precisa conter uma coluna correspondente.
#'    Se são 5 categorias, são 4 mudanças. É preciso que hajam as colunas b1, b2, b3 e b4
#'  6. Uma coluna com o parâmetro `c`, de mesmo nome.
df_instrumento <- readxl::read_xlsx(
'data-raw/df_instrumento.xlsx'
)
#' Rode a função abaixo para verificar os requisitos citados acima.
#' Se estiver tudo certo, ela mesmo irá salvar a base de dados.
verifica_requisitos_df_instrumento(df_instrumento)
rstudioapi::navigateToFile("R/app_server.R")
rstudioapi::navigateToFile("R/mod_apresentacao.R")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.package('attachment') # if needed.
attachment::att_amend_desc()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
is.null(r$cat$aplicados)
cria_mod_minimo(
mod = r$cat,
df = df_instrumento,
theta_inicial = r$config$theta_inicial
)
mod = r$cat
df = df_instrumento
theta_inicial = r$config$theta_inicial
r$cat <- cria_mod_minimo(
mod = r$cat,
df = df_instrumento,
theta_inicial = r$config$theta_inicial
)
atualiza_r_cat(
mod = r$cat,
it_select = next_item(
df = df_instrumento,
aplicados = r$cat$aplicados,
theta_inicial = r$config$theta_inicial,
theta = r$cat$theta
),
input = input$alternativas,
df = df_instrumento,
modelo_cat = mirt_model
)
golem::add_fct("atualiza_r_cat")
golem::add_fct("fim_cat")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
is.null(r$cat$aplicados)
# Caso seja o primeiro item
if(is.null(r$cat$aplicados)){
r$cat <- cria_mod_minimo(
mod = r$cat,
df = df_instrumento,
theta_inicial = r$config$theta_inicial
)
}
r$cat <- cria_mod_minimo(
mod = r$cat,
df = df_instrumento,
theta_inicial = r$config$theta_inicial
)
r$cat <- atualiza_r_cat(
mod = r$cat,
it_select = r$it_select,
input = input$alternativas,
df = df_instrumento,
modelo_cat = mirt_model
)
r$cat
fim_cat(
# criterios
criterio = list(
erro = r$config$erro,
max.itens = nrow(df)
),
erro = r$cat$se_atual,
aplicados = r$cat$aplicados
)
r$config$erro
nrow(df)
fim_cat(
# criterios
criterio = list(
erro = r$config$erro,
max.itens = nrow(df_instrumento)
),
erro = r$cat$se_atual,
aplicados = r$cat$aplicados
)
r$cat$se_atual
r$cat$aplicados
r$config$erro
# Verifica se a CAT chegou ao fim
r$cat$fim <- fim_cat(
# criterios
criterio = list(
erro = r$config$erro,
max.itens = nrow(df_instrumento)
),
erro = r$cat$se_atual,
aplicados = r$cat$aplicados
)
r$cat$fim$fim
r$cat$fim$fim
next_item(
df = df_instrumento,
aplicados = r$cat$aplicados,
theta_inicial = r$config$theta_inicial,
theta = r$cat$theta
)
next_item(
df = df_instrumento,
aplicados = r$cat$aplicados,
theta_inicial = r$config$theta_inicial,
theta = r$cat$theta
)
next_item(
df = df_instrumento,
aplicados = r$cat$aplicados,
theta_inicial = r$config$theta_inicial,
theta = r$cat$theta
)
next_item(
df = df_instrumento,
aplicados = r$cat$aplicados,
theta_inicial = r$config$theta_inicial,
theta = r$cat$theta
)
next_item(
df = df_instrumento,
aplicados = r$cat$aplicados,
theta_inicial = r$config$theta_inicial,
theta = r$cat$theta
)
next_item(
df = df_instrumento,
aplicados = r$cat$aplicados,
theta_inicial = r$config$theta_inicial,
theta = r$cat$theta
)
next_item(
df = df_instrumento,
aplicados = r$cat$aplicados,
theta_inicial = r$config$theta_inicial,
theta = r$cat$theta
)
isolate(
r$it_select <- next_item(
df = df_instrumento,
aplicados = r$cat$aplicados,
theta_inicial = r$config$theta_inicial,
theta = r$cat$theta
)
)
r$it_select
renderUI({
r$carrossel_itens[['radio']](
df_instrumento,
r$it_select,
ns
)
})
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
r$cat$se_atual
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::add_module(name = "devolutiva") # Name of the module
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "aplicacaoCAT", # The Name of the package containing the App
pkg_title = "plicacaoCAT", # The Title of the package containing the App
pkg_description = "Um modelo para testagem adaptativa computadorizada.", # The Description of the package containing the App
author_first_name = "Araê", # Your First Name
author_last_name = "Cainã", # Your Last Name
author_email = "arae@cavante.com", # Your Email
repo_url = 'https://github.com/catvantelab/aplicacaoCAT' # The URL of the GitHub Repo (optional)
)
golem::add_shinyappsio_file()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
aplicacaoCAT::run_app() # add parameters here (if any)
citation('catIrt')
